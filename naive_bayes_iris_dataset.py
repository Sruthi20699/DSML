# -*- coding: utf-8 -*-
"""NAIVE BAYES IRIS DATASET.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1j037-kHzjaUHOR6tpyL4SYgFwVi2JISz

h1><center>NAIVE BAYES CLASSIFICATION ON IRIS DATASET</center></h1> 

Date___________________

AIM:To implement Naive Bayes classification using any standard dataset available in the public domain and find the accuracy of the algorithm.

Algorithm:
Step 1:start
Step 2: Importing the standard libraries.
Step 3:Load the iris dataset-iris.csv
The iris dataset contains the following data
    50 samples of 3 different species of iris (150 samples total)
    Measurements: sepal length, sepal width, petal length, petal width
    The format for the data: (sepal length, sepal width, petal length, petal width)
Step 4:Define x and y and label the fields
Step 5:Split the dtatset into Training and testing
Step 6:preprocess the dataset using StandardScaler
    StandardScaler removes the mean and scales each feature/variable to unit variance
Step 7:Train the data using GuassianNB model
Step 8:Test the data using Test set
Step 9:Create the confusion matrix and Find the accuracy
Step 10:Stop
"""

import pandas as pd
from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import confusion_matrix,accuracy_score
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import GaussianNB

dataset = pd.read_csv('iris.csv')
print(dataset.describe())
print(dataset.head())

X = dataset.iloc[:, [1, 2, 3]].values
y = dataset.iloc[:, -1].values
le = LabelEncoder()
X[:,0] = le.fit_transform(X[:,0])

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20, random_state =0)

sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)
from sklearn.naive_bayes import GaussianNB
classifier = GaussianNB()

classifier.fit(X_train, y_train)
y_pred = classifier.predict(X_test)

cm = confusion_matrix(y_test, y_pred)
ac = accuracy_score(y_test,y_pred)
print(cm)
print(ac)